/*! \page stein Steiner Tree

\section def Problem definition.
\copydoc stein_def 

\section sol1 Solution 1
We solve this problem using Zelikovsky 11/6 approximation algorithm. The algorithm exploit model of the WeakVoronoi concept (see \ref voronoi), where the generators are the terminals and the vertices are nonterminals.  There is one additional assumption on metric i.e.  we only use this metric only for distances (Nonterminal, Terminal) and (Terminal, Terminal).

  example: 
   \snippet zelikovsky_11_per_6_example.cpp Steiner Tree Example

  complete example is zelikovsky_11_per_6_example.cpp

\subsection apps_st Approximation Ratio equals 11/6
\subsection com The complexity 
Complexity of the algorithm is \f$O(|V|*|E| + |T|^4)\f$ where \a T is the set of terminals.

\subsection References
The algorithm is described in the \cite Zelikovsky93.

\section sol2 Solution 2
Another implemented solution is Dreyfus Wagner algorithm. 
It solves exact SteinerTree problem in exponential time in respect of number of terminals.
Not an approximation algorithm by itself, it is used to solve subproblems in many other algorithms.

Example:
 \snippet dreyfus_wagner_example.cpp Dreyfus Wagner Example
 
\subsection com The complexity
 Complexity of the algorithm is \f$O(3^{|T|} * |V| + 2^{|T|} * |V|^2)\f$, where \a T is the set of terminals.

\subsection ref References
The algorithm is described in the \cite Ding2000.

\section sol3 Solution 3
Another implemented solution is LP-based approximation algorithm.
It is currently the best known approximation algorithm for solving general Steiner Tree problem.

We consider an LP relaxation of the problem, which is based on the notion of directed components. 
We sample one component with probability proportional to the value of the associated variable 
in a fractional solution: the sampled component is contracted and the LP is updated consequently. 
We iterate this process until all terminals are connected.

Example:
 \snippet ir_steiner_tree_example.cpp IR Steiner Tree Example

\subsection apps_st2 Approximation Ratio equals 1.39
 
\subsection ref References
The algorithm is described in the \cite Byrka2013.

*/
