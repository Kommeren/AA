/*! \page fractional_winner_determination_in_MUCA Fractional Winner Determination in MUCA

\section def Problem definition.
We have a set of bidders \f$K\f$, \f$|K| = k\f$ and a set of all kinds of goods for sale \f$U\f$, \f$|U| = m\f$.
Each good \f$ e \in U\f$ is available in \f$b_e \in \mathbb{N}\f$ copies, \f$ B = min_e \{b_e\}\f$. Let
\f$v_{i,S} > 0\f$ be the valuation of a bidder \f$ i \in K\f$ for a bundle \f$S \subseteq U\f$.
We want to solve the linear programming relaxation <b>LPR</b> of the \ref winner_determination
"winner determination problem":

\f{eqnarray*}
\mbox{max:} & \sum_{i \in K} \sum_{S \subseteq U} v_{i,S} x_{i,S} & \\
\mbox{subject to:} & & \\
& \sum_{i \in K} \sum_{S: S \subseteq U, e \in S} x_{i,S} \leq b_j & \mbox{ for every } j\in U\\
& \sum_{S \subseteq U} x_{i,S} \leq 1  & \mbox{ for every } i\in K\\
& x_{i,S} \geq 0 & \mbox{ for every } i\in K, S \subseteq U\\
\f}

In the integer program, each variable \f$x_{i,S}\f$ equals 1 if a bidder \f$i\f$ receives the bundle \f$S\f$, and
zero otherwise. In the relaxation these variables correspond to fractional allocations.

Bidders are supposed to specify
their bids through a \ref demand_query "demand query oracle": given prices \f$ p_j \f$ for each \f$ j \in U\f$,
the bidder \f$i\f$ reports \f$S \subseteq U\f$ that maximizes \f$v_{i,S} - \sum_{j \in S} p_j\f$.

\section Solution

We consider the following dual linear program <b>DLPR</b>:

\f{eqnarray*}
\mbox{min:} & \sum_{i \in K} u_i + \sum_{j \in U} b_j p_j & \\
\mbox{subject to:} & & \\
& u_i + \sum_{j \in S} p_j \geq v_{i,S} & \mbox{ for every } i \in K, S \subseteq U\\
& u_i \geq 0, p_j \geq 0 & \mbox{ for every } i \in K, j \in U\\
\f}

This program has \f$n + m\f$ variables but an exponential number of constraints. We solve it with the
\ref rowgen "row generation technique", using demand queries to implement the separation oracle.
Then we take the "reduced dual" where only the constraints encountered by the row generation algorithm exist,
and look at its dual. This dual has the same solution as <b>LPR</b> but only as many variables as number of
iterations of row generation algorithm. We can thus solve it directly.

  example:
\snippet fractional_winner_determination_in_MUCA_example.cpp Fractional Winner Determination in MUCA Example

  complete example is fractional_winner_determination_in_MUCA_example.cpp

\subsection com_fractional_winner_determination_in_MUCA The complexity
<b>Time complexity:</b> \f$O(rows * (k * DQ_{time}) * LP_{time}(k + m, rows) +
   LP_{time}(k * rows, m + k))\f$ where \f$rows\f$ is the number of rows generated by the row
   generation technique, \f$DQ_{time}\f$ is the time complexity of one demand query,
   \f$LP_{time}(col, row)\f$ is the time complexity of solving the \f$LP\f$ with \f$O(cols)\f$
   columns and \f$O(row)\f$ rows.<br><br>
<b>Memory complexity:</b> \f$O(DQ_{mem} + LP_{mem}(k + m, rows) + LP_{mem}(k * rows, m + k))\f$
   where \f$DQ_{mem}\f$ is the memory complexity of one demand query, \f$LP_{mem}(col, row)\f$
   is the memory complexity of solving the \f$LP\f$ with \f$O(col)\f$ columns and \f$O(row)\f$
   rows.

\subsection References
Algorithm is based on proof of theorem 11.24 described in \cite AlgGameTheory, section 11.5.

*/
