/*! \page repo Using git resitory in paal
  

\section gerrit Working with gerrit

To configure Gerrit, do the following steps:
<ol>
<li> Enter Gerrit site and register (using OpenID, e.g. Google Account)
<pre>
http://siekiera.mimuw.edu.pl:8082/
</pre>

<li> In settings, open SSH Public Keys tab. Add the public key from the machine you're using for development (cat .ssh/id_rsa.pub)
     If you don't have one it can be generate using
<pre>
ssh-keygen -t rsa
</pre>
   after invoking that command there will be two files in your .ssh directory : id_rsa and id_rsa.pub. Move id_rsa.pub to contain your real email address. 

<li> Clone write access version of the repository
<pre>
git clone ssh://\<login\>\@siekiera.mimuw.edu.pl:29418/paal
</pre>

<li> Download commit message hook. It will add a line 'Change-Id: ...' to every commit message. This is required by Gerrit and allows keeping many versions of the same commit.
<pre>
scp -p -P 29418 \<login\>\@siekiera.mimuw.edu.pl:hooks/commit-msg \<projectDir\>/.git/hooks/
</pre>

<li> To send something for review, use a command:
<pre>
git push origin HEAD:refs/for/master
</pre>

<li> If you want to update your commit (e.g. reviewers requested some changes) do: 
<pre>
git commit -a --amend
git push origin HEAD:refs/for/master
</pre>

<li> When commit is accepted, and you have the privileges to push to master, do: 
<pre>
git push origin HEAD:master
</pre>

<li> You can find more info about using Gerrit here:
<pre>
http://gerrit-documentation.googlecode.com/svn/Documentation/2.6/intro-quick.html
</pre>
</ol>

\section gr General rules
    <ul>
    <li> Use naming consistent with the rest of library. (camel classes and variables, _ names for files and namespaces).
    <li> Never use \<TAB\>, only spaces are legal!
    <li> Don't write macros.
    <li> Code is header only
    <li> Use desing patterns: traits, tag dispatching, visitors.
    <li> Strong preference of static polymorphism.
    </ul>
\section Workflow
<ul>
<li> Each developer works on his own branch. 
<li> Before pushing to master code goes through code review process.
<li> Each developer is responsible for his own branch. If you to move your current branch with the newest changes from master use 
<pre>
git fetch
git rebase origin/master
</pre>
and follow the instructions.
<b>Particularly never use git pull</b>
<li> If you have no experience in using git or in case of any problems please contact wygos@mimuw.edu.pl
</ul>
\section Misc
Developers mailing list:
http://lists.mimuw.edu.pl/listinfo/paal_developers
*/

