/*! \page maximum_coverage Maximum Coverage

\section def Problem definition.
In budgeted maximum coverage we are given Universe \f$U\f$ and family \f$S\f$ of subsets of \f$U\f$.
Each element e in \f$U\f$. has weight w(e)
We are also given number \f$k\f$

The goal if to find subfamily \f$C\subseteq S\f$ that has size not greater than k and
maximize weight of covered elements.

\section Solution

We use the following algorithm:

At each stage we add to \f$C\f$ a set witch maximizes (weight of uncovered elements)/(cost of set).

We repeat the step as long as number of selected sets is smaller than k.

  example:
\snippet max_coverage_example.cpp Max Coverage Example

  complete example is max_coverage_example.cpp

\subsection parameters_maximum_coverage Parameters

IN: <i>SetIterator</i> sets_begin

IN: <i>SetIterator</i> sets_end,

IN: <i>GetElementsOfSet</i> set_to_elements

OUT: <i>OutputIterator</i> result

The Iterators of selected Sets will be output to the output iterator result

The iterator type must be a model of <i>Output Iterator</i>

IN: <i> GetElementIndex</i> get_el_index we need in algorithm map elements to small unique integers

IN: <i>unsigned int</i> number_of_sets_to_select

IN: <i>GetWeightOfElement</i> element_to_weight =GetWeightOfElement()


\subsection app_WsetCover Approximation Ratio
equals to \f$ 1-1/e \f$.

\subsection com_WsetCover The complexity
Complexity of the algorithm is \f$E*log(|S|)\f$. where \f$E\f$ is number of elements in all sets and \f$S\f$ is number of sets

Memory complexity of the algorithm is \f$E\f$. where \f$E\f$ is number of elements in all sets

\subsection References

The algorithm analysis is described in \cite Cohen:2008:GMC:1401272.1401544

*/
