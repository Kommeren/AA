/*! \page bdmst Bounded-Degree Minimum Spanning Tree

\section def Problem definition.  

In the Bounded-Degree Minimum Spanning Tree problem we are given:
a connected, undirected graph \f$G=(V,E)\f$ with edge costs \f$c:E\to
R\f$ and degree upper bounds \f$B_v\f$ for each \f$v\in V\f$. The goal is
to find a spanning tree of minimum cost, which satisfies the degree bounds.
Both finding the optimal spanning tree and deciding whether a
spanning tree satisfying the degree bounds exists are NP-complete problems.

An Integer Programming formulation of the problem is as follows.
We introduce a binary variable \f$x_e\f$ for every edge \f$e\in E\f$.
For a vertex \f$v\f$, let \f$\delta(v)\f$ denote the set of edges
incident with \f$v\f$ in \f$G\f$. For a set of vertices \f$S\subseteq
V\f$ let \f$E(S)\f$ denote the the set of edges \f$e\in E\f$ with
both endpoints in \f$S\f$. Also, let \f$x(A) = \sum_{e\in A} x_e\f$.
\f{eqnarray*}
\mbox{minimize:} & \sum_{e\in E} \ c_e x_e & \\ 
\mbox{subject to:} & & \\
& x(E(V))=|V|-1 & \\
& x(E(S)) \leq |S|-1 & \mbox{ for every } \emptyset \neq S \subset V \\
& x(\delta(v))\leq B_v & \mbox{ for every } v \in V\\ 
& x_e \in \{0,1\} & \mbox{ for every } e\in E\\ 
\f}


\section Solution

We use a natural relaxation of the above IP formulation, where we
replace condition:
\f{eqnarray*}
& x_e \in \{0,1\} & \mbox{ for every } e\in E\\ 
\f}
with:
\f{eqnarray*}
& 0 \leq x_e \leq 1 & \mbox{ for every } e\in E\\ 
\f}
The algorithm then follows the Iterative Rounding framework:

repeat:
- find an extreme point solution to the LP
- remove all edges with \f$x_e=0\f$ from \f$G\f$ (round)
- remove a degree bound \f$B_v\f$ such that \f$deg_G(v) \leq B_v + 1\f$ from the LP (relax)

until solution to the LP is integral.

As the LP formulation has got an exponential number of constraints, we need
to use a separation oracle and the row generation technique to solve it.

example: 
   \snippet bounded_degree_mst_example.cpp Bounded-Degree Minimum Spanning Tree Example
 
complete example of the usage can be found in file bounded_degree_mst_example.cpp

\subsection app_bdmst The algorithm gives an additive one approximation.
The cost of the solution is at most the cost of
the optimal solution and each degree bound is violated by at most 1.

\subsection References

The iterative rounding additive one approximation by Singh and Lau is described in
\cite SinghLauBDMST.
*/
