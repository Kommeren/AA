/*! \page tree_aug Tree Augmentation

\section def Problem definition.

The Tree Augmentation problem is the
following: given a 2-edge-connected graph \f$G=(V,T\cup E)\f$, in
which a spanning tree \f$T\f$ is specified. The edges of this tree are
called _tree edges_, or simply _edges_, while non-tree edges are
called _links_. Links have associated nonnegative costs \f$c:E\to
{R}_+\f$. The target is to find a minimum cost subset of links that
together with the tree edges give a 2-edge-connected subgraph.  The
problem is NP-complete, the best known approximation algorithms have
factor 2.

An Integer Programming formulation of the problem is as follows. We introduce
a binary variable \f$x_e\f$ for every link \f$e\f$. For a tree edge \f$t\f$,
let \f$\delta_E(t)\f$ denote the set of links that connect the 2 components of
the graph \f$(V,T-t)\f$. Also, let \f$x(A) = \sum_{e\in A} x_e\f$.
\f{eqnarray*}
\mbox{minimize:} & \sum_{e\in E} \ c_e x_e & \\
\mbox{subject to:} & & \\
& x(\delta_E(t))\ge 1 & \mbox{ for every } t\in T\\
& x_e \in \{0,1\} & \mbox{ for every }e\in E\\
\f}


\section Solution

The Tree Augmentation problem is a special case of the
Steiner Network Problem. The solution presented here is the iterative
rounding 2-approximation algorithm by Jain \cite jain2001factor.  The main
characteristic of this special case is that the LP relaxation that we
use has polynomial size: we use the following natural relaxation of
the above formulation.
\f{eqnarray*}
\mbox{minimize:} & \sum_{e\in E} \ c_e x_e & \\
\mbox{subject to:} & & \\
& x(\delta_E(t))\ge 1 & \mbox{ for every } t\in T\\
& 0 \le x_e & \mbox{ for every }e\in E\\
\f}

\section Example
   \snippet tree_augmentation_example.cpp Tree Augmentation Example

complete example of the usage can be found in file tree_augmentation_example.cpp

\section app_ta Approximation Ratio
The approximation ratio of this algorithm equals 2.

\section Complexity

The time complexity of the algorithm is \f$O(|T|*(|T|+|E|+LP_{time}(|E|,|T|)))\f$,
where \f$|T|\f$ and \f$|E|\f$ are respectively the numbers of tree edges and links
and \f$LP_{time}(col, row)\f$ is the time of solving the LP with \f$O(col)\f$
columns and \f$O(row)\f$ rows.

The memory complexity of the algorithm is \f$O(|E|+|T|+LP_{mem}(|E|,|T|))\f$,
where \f$LP_{mem}(col, row)\f$ is the memory complexity of solving the LP with
\f$O(col)\f$ columns and \f$O(row)\f$ rows.

\section References

Jain's iterative rounding 2-approximation algorithm is described in
\cite jain2001factor.  The book \cite lau2011iterative contains a nice description
of this algorithm (Chapter 10), along with many other iterative
algorithms. However, these references do not detail the Tree
Augmentation Problem separately.


*/
