/*! \page comps Components

\section mot Motivation

The \a components class is boost.fusion.map-like class with constant set of
keys (names) that supports default values for each key.

This class is used in the design of template function, that instead of taking
several arguments takes one \a components class representing these arguments
(see \ref mot_exmpl for more details). One can think of the \a components class
as a tuple containing these arguments.

This way of designing a template function provides many benefits. The arguments
are binded together, this feature is valuable when the function arguments
depend on each other. While the arguments are grouped together into one \a
components class, one can easily replace one of them (see \ref repl_comps for
more details).

There are more benefits of this design. Assume that one is implementing
a template function and wants to provide several  configurations of the default
arguments and permits the function's user to easily create the new
configuration of the defaults arguments. This can be easily  done using the \a
components class (see \ref mot_exmpl for more details).

\subsection mot_exmpl Motivating example
Suppose that we would like to write a function which takes three functors: Init, Start and Stop.
We are going to construct an interface with usage of the \a components class.


<b> Very basic usage: </b>

The interface of the function has to be defined in the following way:

<pre>
    template \<typename DoStuffComponents\>
    void do_stuff(DoStuffComponents comps);
</pre>

we need to define the names of the needed components:

<pre>
    struct Init;
    struct Start;
    struct Stop;
</pre>

and specify the  appropriate \a components class:

<pre>
    template <typename... Args>
    using DoStuffComponents = Components<Init, Start, Stop>::type<Args...>;
</pre>


In order to use the function, the user needs to implement InitImpl, StartImpl,
StopImpl functors.  Then the function can be called as follows:
<pre>
    DoStuffComponents<InitImpl, StartImpl, StopImpl> doStuffComponents;
    do_stuff(doStuffComponents);
</pre>
Here, we have assumed that all the
implementations have default constructors, however, this is not mandatory.
There are different ways of initializing components (see section: \ref
const_comp for more details).

Let us now discuss how to access the parameters in DoStuffComponets:
<pre>
    doStuffComponents.get<Init>(); //getting Init component

    InitImpl anotherImplementation(42);
    doStuffComponents.set<Init>(anotherImplementation); //setting Init component

    doStuffComponents.call<Start>("hello world"); // you can directly call a component if it is a functor
</pre>


<b> How to provide default parameters: </b>

You can define \a DoStuffComponents as follows:
<pre>
    template <typename... Args>
    using DoStuffComponents = Components\<Init, NameWithDefault\<Start, DefaultStart\>, NameWithDefault\<Stop, DefaultStop\>\>::type\<Args...\>;
</pre>

A user can construct the \a DoStuffComponents as follows:
<pre>
    DoStuffComponents<InitImpl> doStuffComponents1;
    DoStuffComponents<InitImpl, StartImpl> doStuffComponents2;
    DoStuffComponents<InitImpl, StartImpl, StopImpl> doStuffComponents3;
</pre>

The above example illustrates the main motivation for the \a components class.
The library also provides much more handy ways of manipulating the \a
components, which will be described in the following sections.

\section def_comp Defining Components

A components can have any type including
reference types. Default parameters can be specified for any number of
components (when a component has a default value then also all following
components must have a default value).  The components class can be defined
using template aliasing (this is the preferred way):

<pre>
    //inside library:
    template <typename... Args> using DoStuffComponents = Components<Init, Start, Stop>::type<Args...>;

    //user:
    DoStuffComponents<InitImpl, BeginImpl, StopImpl> doStuffComponents;

</pre>
This can also be done without template aliasing:
<pre>
    //inside library:
    typedef Components<Init, Start, Stop> DoStuffComponents;

    //user:
    DoStuffComponents::type<InitImpl, BeginImpl, StopImpl> doStuffComponents;
</pre>

\section const_comp Constructing Components
There are several ways of constructing components:
<ul>
<li> By providing any number of arguments. The kth argument has to be convertible to the kth component:
<pre>
    //inside library:
    template <typename... Args>
    using DoStuffComponents = Components<Init, Start, Stop>::type<Args...>;

    //user:
    typedef DoStuffComponents<double, int, int> MyDoStuffComponents;

    MyDoStuffComponents doStuffComponents;
    MyDoStuffComponents
    doStuffComponents(1,2);
    int a;
    MyDoStuffComponents doStuffComponents(a);
</pre>
<li> By providing any object and a CopyTag. This tag indicates, that
    the passed object has  get<Name> member functions for some Names:
<pre>
    template <typename... Args> using DoStuffComponents = Components<Init, Start, Stop>::type<Args...>;
    typedef DoStuffComponents<int, int, int> Big;

    template <typename... Args>
    using SmallDoStuffComponents = Components<Start, Stop>::type<Args...>;
    typedef SmallDoStuffComponents<int, int> Small;

    Small small(1,2);
    Big big(small, CopyTag());

    Small small2(big, CopyTag());
</pre>

<li> Object can be made by providing some arguments by name:

<pre>
    template <typename... Args>
    using DoStuffComponents = Components<Init, Start, Stop>::type<Args...>;
    typedef DoStuffComponents<int, int, int> MyDoStuffComps;

    auto m = MyDoStuffComps::make<Init, Stop>(7, 2); // The start component has default int value (actually as build in it might be uninitialized);

</pre>
<li> It is not necessary to provide any type at all for the components, as the following example shows:
<pre>
    typedef Components<Init, Start, Stop> DoStuffComponents;

    int a;
    auto myComps = DoStuffComponents::make_components(1, a, std::ref(a));
</pre>
If the deduced type should be a reference, the std::ref wraper should be used.

</ul>
The important thing is that a component does not need to have a default
constructor unless the default constructor is actually used.

\section repl_comps Replacing Components
The components can be replaced in a given \a components instance. A new instance is created this way:

<pre>
    template <typename... Args>
    using DoStuffComponents = Components<Init, Start, Stop>::type<Args...>;
    typedef DoStuffComponents<int, int, int> SomeDoStuffComps;

    typedef ReplacedType<Start, double, SomeDoStuffComps>::type Replaced; // Start type is changed from int to double

    SomeDoStuffComps comps;
    double d(5);
    Replaced replaced = replace<Start>(d, comps); //replacing component
</pre>

\section comp_to_other_libs Comparison to other libraries
<ul>
    <li> Boost.Parameter

        The main differences between boost.parameter and \a components classes are:
        <ul>
        <li> The \a components class supports different sets of default arguments.
                The default arguments in the function call can be easily changed by the user.
        <li> The \a components class is written in pure C++ (no macros).
        <li> The \a components supports default arguments only
                when they have a default constructor (boost.parameter is much more flexible here).
        </ul>
        The \a components class is not designed to replace boost.parameter
        but in many cases (e.g., when the arguments are
        functors or when the given arguments can depend on each other)
        it might be a more natural design.

    <li> Boost.Fusion

        Although the idea of the \a components is very similar to
        boost.fusion.map, the \a components gives some functionalities that are
        not offered by boost.fusion.map.  For example, it supports different
        initialization methods (see section: \ref const_comp for more details).

</ul>

\section supp_com Supported Compilers
<ul>
<li> clang 3.4
<li> g++ 4.8.1
</ul>
MSVC is not supported due to lack of template aliasing.

<!-- \section iterot Iterating Over Components class (TODO) -->



*/
