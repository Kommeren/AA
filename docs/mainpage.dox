/*! \mainpage This is the Practical Approximation Algorithms library. 
 
  \section Introduction
    The PAAl is a header-only, general library consisting of general algorithms, 
    data structures and several complete solution for the various optimization problems.
    The PAAl is implemented taking advantage of the new fabulous features of C++ introduced in the c++0x standard.
 
  \section Installation
   There is no need to install anything because the PAAl is header only. 
   All you have to do is to download the library and include appropriate headers.
   Only, if you use linear programming you must link your executable agains glpk.

   If you'd like to develop the library, you must compile the unit test.

  \section get_repo Download
    In order to download repository please run the following command:
    
    <B>    git clone http://siekiera.mimuw.edu.pl:8082/paal </B>

  \section Contents
    The library consists of several sublibraries
    <ul> 
    <li> Algorithms
        <ul>
        <li>\ref local_search
            <ul>
            <li>\ref twoopt 
            <li>\ref fl 
            <li>\ref kmedian
            <li>\ref cfl
            </ul>
        <li> Iterative Rounding
            <ul>
            <li>\ref ta
            </ul>
        <li> Miscellaneous
            <ul>
            <li>\ref stein
            </ul>
        </ul>
    <li> Concepts
        <ul>
        <li>\ref metric
        <li>\ref cycle
        <li>\ref voronoi
        </ul>
    <li> Data Structures
        <ul>
        <li>\ref paal::data_structures::GraphMetric
        <li>\ref paal::data_structures::ArrayMetric
        <li>\ref paal::data_structures::SimpleCycle
        <li>\ref paal::data_structures::SplayCycle
        <li>\ref paal::data_structures::ObjectWithCopy
        <li>\ref paal::data_structures::FacilityLocationSolution
        <li>\ref paal::data_structures::Voronoi
        <li>\ref paal::data_structures::CapacitatedVoronoi
        <li>\ref paal::data_structures::SubsetsIterator
        <li>\ref paal::data_structures::VertexToEdgeIterator
        <li>\ref paal::data_structures::BiMap
        </ul>
    </ul>

  \section general_design General Design  
   
  The library is divided into the three layers:
   
  <pre>
   ___________________________________________________________________________________________________
  
      ALGORITHMS  - eg. LocalSearch. The algorithms are written in very general way.
      The are delegating the specific tasks to the algorithm helpers.
  ___________________________________________________________________________________________________
  
      ALGORITHMS COMPONENTS - eg. NeighborhoodGetter, Commit.
      This are the bricks  working on specific data structures concepts.
  ___________________________________________________________________________________________________
  
      DATA_STRUCTURES - e.g. Metric, Cycle. The data structure used by algorithm helpers. 
  ___________________________________________________________________________________________________
  
  </pre>
  <br>
  Our library is delivering default implementations of components from each layer. <br>
  The strength of this design is that the user is allowed to change components from each layer. <br><br>
  
  For example the user can easily swap the implementation of the NeighborhoodGetter to provide his own way of searching the neighborhood. <br>
  Also note that the same algorithm helpers that are used by local search can be used to produced the simulated annealing algorithm. <br>
  If the user want to swap implementation of the metric to use specific properties of his topology is not the problem at all! <br>
  
 \section Platforms
 Currently the library compiles on the gcc 4.7.3. and clang 3.2 Unfortunately the library does not compile on the newest Microsoft Visual Studio 2012 due to the poor support of c++0x.

  \section  Testing

  //TODO
 
*/
