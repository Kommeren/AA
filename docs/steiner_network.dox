/*! \page steiner_network Steiner Network

\section def Problem definition.

In the Steiner Network problem we are given an undirected graph \f$G=(V,E)\f$
with edge costs \f$c:E\to R\f$ and connectivity requirements \f$r_{uv}\f$
for all vertex pairs \f$u,v\f$.
A Steiner Network is a subgraph of \f$G\f$ with at least \f$r_{uv}\f$
edge-disjoint paths between each pair of vertices \f$u\f$ and \f$v\f$.
The goal is to find a Steiner Network with the minimum cost.

An LP relaxation of the problem is as follows. We introduce a
variable \f$x_e\f$ for every edge \f$e\in E\f$.
For a set of vertices \f$S\f$, let \f$\delta(S)\f$ denote the set of edges
of \f$G\f$ with exactly one endpoint in \f$S\f$. Also, let \f$x(A) =
\sum_{e\in A} x_e\f$.
\f{eqnarray*}
\mbox{minimize:} & \sum_{e\in E} \ c_e x_e & \\
\mbox{subject to:} & & \\
& x(\delta(S))\geq\max_{u\in S, v\notin S}r_{uv} & \mbox{ for every } S \subseteq V \\
& 0 \leq x_e \leq 1 & \mbox{ for every } e\in E\\
\f}



\section Solution

We solve the problem using Jain's iterative rounding 2-approximation
algorithm (using the above LP formulation).

As the LP formulation has an exponential number of constraints, we need
to use a separation oracle and the row generation technique to solve it. The
implemented separation oracle differs from the one described in \cite jain2001factor .
It is easy to prove that, given a clique with edge weights equal \f$r_{uv}\f$, the
separation oracle only has to check the minimum cut values between pairs of vertices
which are the endpoints of edges of a maximum spanning tree in this clique.

\section Example
   \snippet steiner_network_example.cpp Steiner Network Example

complete example of the usage can be found in file steiner_network_example.cpp

\section app_steiner_network Approximation Ratio
The approximation ratio of this algorithm equals 2.

\section com_steiner_network Complexity
\todo This paragraph is wrong. It doesn't account for the fact that as we generate more rows
in the row generation technique, our lp instance gets bigger.

The time complexity of the algorithm is \f$O(|E|*(|V|+|E|+LP_{rowgen}))\f$, where
\f$|V|\f$ and \f$|E|\f$ are respectively the numbers of vertices and edges
whereas \f$LP_{rowgen}\f$ is the time of solving the LP using row generation technique.
\f$LP_{rowgen}=O(rows * (|V|^4 + LP_{time}(|E|,|V|)))\f$, where \f$rows\f$ is the number
of generated rows and \f$LP_{time}(col, row)\f$ is the time of solving
the LP with \f$O(col)\f$ columns and \f$O(row)\f$ rows.

The memory complexity of the algorithm is \f$O(|V|^2+|E|+LP_{mem}(|E|,|V|))\f$, where
\f$LP_{mem}(col, row)\f$ is the memory complexity of solving the LP with
\f$O(col)\f$ columns and \f$O(row)\f$ rows.

\section References

Jain's iterative rounding 2-approximation algorithm is described in
\cite jain2001factor. The book \cite lau2011iterative contains a nice description
of this algorithm (Chapter 10), along with many other iterative
algorithms.

*/
