/**
 * @file lp_row_generation.hpp
 * @brief
 * @author Piotr Godlewski
 * @version 1.0
 * @date 2013-06-04
 */
#ifndef LP_ROW_GENERATION_HPP
#define LP_ROW_GENERATION_HPP

#include "paal/lp/problem_type.hpp"

namespace paal {
namespace lp {

/**
 * @class LPRowGeneration
 *
 * @brief Finds an extreme point solution to the LP using the row generation technique.
 */
template <typename Oracle>
class LPRowGeneration {
public:
    /// Constructor.
    LPRowGeneration(Oracle & oracle) : m_oracle(oracle) {}

    /**
     * Finds an extreme point solution to the LP using the row genereation technique:
     * solves the initial LP and then ask the separation oracle if the found solution
     * is a feasible solution to the complete problem. If not, adds a new row (generated by
     * the oracle) to the LP and reoptimizes it. This procedure is iterated until a
     * feasible solution to the full LP is found.
     */
    template <typename Problem, typename LP>
    ProblemType operator()(const Problem & problem, LP & lp, ProblemType probType) {
        while (probType == OPTIMAL && !m_oracle.feasibleSolution(problem, lp)) {
            m_oracle.addViolatedConstraint(problem, lp);
            probType = lp.resolveToExtremePointDual();
        }
        return probType;
    }

private:
    Oracle & m_oracle;
};

/**
 * @class RowGenerationSolveLP
 *
 * @brief Finds an extreme point solution to the LP using the row generation technique.
 */
template <typename Oracle>
class RowGenerationSolveLP {
public:
    /// Constructor.
    RowGenerationSolveLP(Oracle & oracle) : m_rowGeneration(oracle) {}

    /**
     * Finds an extreme point solution to the LP using the row genereation technique.
     */
    template <typename Problem, typename LP>
    ProblemType operator()(const Problem & problem, LP & lp) {
        return m_rowGeneration(problem, lp, lp.solveToExtremePointPrimal());
    }

private:
    LPRowGeneration<Oracle> m_rowGeneration;
};

/**
 * @class RowGenerationResolveLP
 *
 * @brief Finds an extreme point solution to the LP using the row generation technique.
 */
template <typename Oracle>
class RowGenerationResolveLP {
public:
    /// Constructor.
    RowGenerationResolveLP(Oracle & oracle) : m_rowGeneration(oracle) {}

    /**
     * Finds an extreme point solution to the LP using the row genereation technique.
     */
    template <typename Problem, typename LP>
    ProblemType operator()(const Problem & problem, LP & lp) {
        return m_rowGeneration(problem, lp, lp.resolveToExtremePointPrimal());
    }

private:
    LPRowGeneration<Oracle> m_rowGeneration;
};


/**
 * @brief Creates a RowGenerationSolveLP object.
 *
 * @tparam Oracle
 * @param o separation oracle object
 *
 * @return RowGenerationSolveLP object
 */
template <typename Oracle>
RowGenerationSolveLP<Oracle>
make_RowGenerationSolveLP(Oracle & o) {
    return RowGenerationSolveLP<Oracle>(o);
}

/**
 * @brief Creates a RowGenerationResolveLP object.
 *
 * @tparam Oracle
 * @param o separation oracle object
 *
 * @return RowGenerationResolveLP object
 */
template <typename Oracle>
RowGenerationResolveLP<Oracle>
make_RowGenerationResolveLP(Oracle & o) {
    return RowGenerationResolveLP<Oracle>(o);
}

} //lp
} //paal

#endif /* LP_ROW_GENERATION_HPP */
