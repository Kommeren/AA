/**
 * @file lp_row_generation.hpp
 * @brief
 * @author Piotr Godlewski
 * @version 1.0
 * @date 2013-06-04
 */
#ifndef LP_ROW_GENERATION_HPP
#define LP_ROW_GENERATION_HPP

#include "paal/lp/problem_type.hpp"

namespace paal {
namespace lp {

/**
 * @class LPRowGeneration
 *
 * @brief Finds an extreme point solution to the LP using the row generation technique.
 */
class LPRowGeneration {
public:
    /**
     * Finds an extreme point solution to the LP using the row genereation technique:
     * solves the initial LP and then ask the separation oracle if the found solution
     * is a feasible solution to the complete problem. If not, adds a new row (generated by
     * the oracle) to the LP and reoptimizes it. This procedure is iterated until a
     * feasible solution to the full LP is found.
     */
    template <typename Problem, typename LP>
    ProblemType operator()(Problem & problem, LP & lp, ProblemType probType) {
        auto & oracle = problem.getOracle();
        while (probType == OPTIMAL && !oracle.feasibleSolution(problem, lp)) {
            oracle.addViolatedConstraint(problem, lp);
            probType = lp.resolveToExtremePointDual();
        }
        return probType;
    }
};

/**
 * @class RowGenerationSolveLP
 *
 * @brief Finds an extreme point solution to the LP using the row generation technique.
 */
class RowGenerationSolveLP {
public:
    /**
     * Finds an extreme point solution to the LP using the row genereation technique.
     */
    template <typename Problem, typename LP>
    ProblemType operator()(Problem & problem, LP & lp) {
        return m_rowGeneration(problem, lp, lp.solveToExtremePointPrimal());
    }

private:
    LPRowGeneration m_rowGeneration;
};

/**
 * @class RowGenerationResolveLP
 *
 * @brief Finds an extreme point solution to the LP using the row generation technique.
 */
class RowGenerationResolveLP {
public:
    /**
     * Finds an extreme point solution to the LP using the row genereation technique.
     */
    template <typename Problem, typename LP>
    ProblemType operator()(Problem & problem, LP & lp) {
        return m_rowGeneration(problem, lp, lp.resolveToExtremePointPrimal());
    }

private:
    LPRowGeneration m_rowGeneration;
};

} //lp
} //paal

#endif /* LP_ROW_GENERATION_HPP */
